server:
  port: 18082
spring:
  application:
    name: user-consumer
eureka:
  client:
    service-url:
      defaultZone: http://localhost:7001/eureka # EurekaServer的地址

# 修改服务地址轮询策略，默认是轮询，配置之后变随机
user-provider:
  ribbon:
    #轮询
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
    #随机算法
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
    #重试算法,该算法先按照轮询的策略获取服务,如果获取服务失败则在指定的时间内会进行重试，获取可用的服务
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule
    #加权法,会根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越大。刚启动时如果同统计信息不足，则使用轮询的策略，等统计信息足够会切换到自身规则。
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAvoidanceRule
    ConnectTimeout: 10000 # 连接超时时间
    ReadTimeout: 5000 # 数据读取超时时间
    MaxAutoRetries: 1 # 最大重试次数(第一个服务)
    MaxAutoRetriesNextServer: 0 # 最大重试下一个服务次数(集群的情况才会用到)
    OkToRetryOnAllOperations: false # 无论是请求超时或者socket read timeout都进行重试

#开启Feign的熔断降级处理
feign:
  hystrix:
    enabled: true
  compression:
    #请求数据压缩
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json #触发执行压缩的文件类型
      min-request-size: 2048  #触发执行压缩的最小数据大小  Nginx
    #响应数据压缩
    response:
      enabled: true

#开启日志功能
logging:
  level:
    com.itheima: debug