<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:pi="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                          http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/context
                          http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/aop
                          http://www.springframework.org/schema/aop/spring-aop.xsd
                          http://www.springframework.org/schema/tx
                          http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--1：创建数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql:///day_1"></property>
        <property name="username" value="root"></property>
        <property name="password" value="root"></property>
    </bean>
    <!--2：创建Dao-->
    <bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--3：创建Service-->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <!--声明式事务处理（xml、注解）-->
    <!--1：事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--2：切入点方法的细化，Service层的方法进行细化-->
    <!--tx:advice：让事务管理器中的方法就是通知
        tx:method：同时对切入点方法进行细化
            name：表示方法的名称
            isolation="DEFAULT"：事务的隔离级别，DEFAULT表示数据库用什么隔离级别，程序就使用什么隔离级别
            propagation="REQUIRED"：事务的传播行为，REQUIRED表示没有事务，开启一个事务；有事务，加入到事务中运行，始终保证所有的操作在一个事务中完成
            timeout="-1"：事务超时，-1表示永不超时，单位秒，默认值是-1
            read-only="false"：事务是否只读，true表示只读（查询），false表示可写（增删改），默认值是false
            rollback-for：定义哪些异常可以回滚
            no-rollback-for：定义哪些异常不回滚
            ######################################################################################################################
            save*：表示以save开头的方法
            *：除了以上的所有方法，其他方法都只读
            优先级：transfer>save*>* 根据精确度来优先
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--切入点（com.itheima.service）中的以sava开头的方法
            isolation="DEFAULT"：事务的隔离级别，DEFAULT表示数据库用什么隔离级别，程序就使用什么隔离级别
            propagation="REQUIRED"：事务的传播行为，REQUIRED表示没有事务，开启一个事务；有事务，加入到事务中运行，始终保证所有的操作在一个事务中完成
            timeout="-1"：事务超时，-1表示永不超时，单位秒，默认值是-1
            read-only="false"：事务是否只读，true表示只读（查询），false表示可写（增删改），默认值是false
            no-rollback-for：定义哪些异常不回滚
            rollback-for：定义哪些异常回滚
            -->
            <tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>
            <!--<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>-->
            <!--<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>-->
            <!--<tx:method name="edit*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>-->
            <!--<tx:method name="remove*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>-->
            <!--<tx:method name="insert*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>-->
            <!--切入点（com.itheima.service）中的transfer方法-->
            <tx:method name="transfer" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false" rollback-for="java.lang.ArithmeticException"/>
            <tx:method name="*" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>

    <!--3：定义切入点；使用aop，让通知关联切入点，让事务的方法去关联业务层方法-->
    <aop:config>
        <aop:pointcut id="myPointcut" expression="execution(* com.itheima.service..*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="myAdvice" pointcut-ref="myPointcut"></aop:advisor>
    </aop:config>

    <!--2：使用注解配置事务管理器，在Service层的类上或者是方法上添加@Transactional
        proxy-target-class="false"：默认值，不是代理目标的类，就是接口（默认JDK代理）
        proxy-target-class="true"：表示对类进行代理（采用CGLIB代理）
    -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
</beans>